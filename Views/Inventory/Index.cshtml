@model IEnumerable<Billing_Software.Models.Inventory>
@{
    ViewData["Title"] = "Inventory";
}

<!-- Compact Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">
            <i class="bi bi-box-seam text-info me-2"></i>Inventory Management
        </h4>
        <p class="text-muted small mb-0">Manage your inventory and stock levels</p>
    </div>
    <div class="btn-group btn-group-sm">
        <a asp-action="Create" class="btn btn-primary btn-sm">
            <i class="bi bi-plus-circle me-1"></i>Add Item
        </a>
        <a asp-action="LowStock" class="btn btn-outline-warning btn-sm">
            <i class="bi bi-exclamation-triangle me-1"></i>Low Stock
        </a>
        <a asp-action="StockValue" class="btn btn-outline-info btn-sm">
            <i class="bi bi-graph-up me-1"></i>Stock Value
        </a>
    </div>
</div>

<!-- Compact Search and Filter with Excel Import/Export -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body p-3">
        <form method="get" class="row g-2">
            <div class="col-md-3">
                <label for="searchTerm" class="form-label small fw-medium">Search</label>
                <input type="text" class="form-control form-control-sm" id="searchTerm" name="searchTerm" 
                       value="@ViewBag.SearchTerm" placeholder="Search by name, SKU, or description">
            </div>
            <div class="col-md-2">
                <label for="category" class="form-label small fw-medium">Category</label>
                <select class="form-select form-select-sm" id="category" name="category">
                    <option value="">All Categories</option>
                    <option value="Parts" selected="@(ViewBag.Category == "Parts")">Parts</option>
                    <option value="Tools" selected="@(ViewBag.Category == "Tools")">Tools</option>
                    <option value="Supplies" selected="@(ViewBag.Category == "Supplies")">Supplies</option>
                    <option value="Accessories" selected="@(ViewBag.Category == "Accessories")">Accessories</option>
                    <option value="Lubricants" selected="@(ViewBag.Category == "Lubricants")">Lubricants</option>
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-outline-primary btn-sm me-1">
                    <i class="bi bi-search me-1"></i>Search
                </button>
                <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-x-circle me-1"></i>Clear
                </a>
            </div>
            <div class="col-md-5 d-flex align-items-end">
                <div class="btn-group btn-group-sm w-100">
                    <button type="button" class="btn btn-outline-success btn-sm" onclick="downloadSampleExcel()">
                        <i class="bi bi-download me-1"></i>Download Sample
                    </button>
                    <button type="button" class="btn btn-outline-info btn-sm" onclick="openUploadModal()">
                        <i class="bi bi-upload me-1"></i>Import Excel
                    </button>
                    <button type="button" class="btn btn-outline-warning btn-sm" onclick="exportInventory()">
                        <i class="bi bi-file-earmark-excel me-1"></i>Export
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Excel Upload Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">
                    <i class="bi bi-file-earmark-excel text-success me-2"></i>Import Inventory from Excel
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="excelUploadForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="excelFile" class="form-label small fw-medium">Select Excel File</label>
                        <input type="file" class="form-control form-control-sm" id="excelFile" name="excelFile" 
                               accept=".xlsx,.xls" required>
                        <div class="form-text small">
                            Supported formats: .xlsx, .xls (Max size: 5MB)
                        </div>
                    </div>
                    <div class="alert alert-info alert-sm">
                        <i class="bi bi-info-circle me-2"></i>
                        <strong>Supported Formats:</strong> Excel (.xlsx, .xls) or CSV (.csv) files. 
                        The file should have columns for Name, SKU, Description, Category, Price, Quantity, and MinStockLevel. 
                        Download the sample file for the correct format.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Cancel
                </button>
                <button type="button" class="btn btn-success btn-sm" onclick="uploadExcel()">
                    <i class="bi bi-upload me-1"></i>Import Items
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Inventory Grid -->
<div class="row">
    @if (Model.Any())
    {
        @foreach (var item in Model)
        {
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-3">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <div class="flex-grow-1">
                                <h6 class="mb-1 fw-bold">@item.Name</h6>
                                <span class="badge bg-light text-dark rounded-pill small">@item.Category</span>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" asp-action="Details" asp-route-id="@item.Id">
                                        <i class="bi bi-eye me-2"></i>View Details
                                    </a></li>
                                    <li><a class="dropdown-item" asp-action="Edit" asp-route-id="@item.Id">
                                        <i class="bi bi-pencil me-2"></i>Edit
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger" asp-action="Delete" asp-route-id="@item.Id">
                                        <i class="bi bi-trash me-2"></i>Delete
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(item.Description))
                        {
                            <p class="text-muted small mb-3">@item.Description</p>
                        }
                        
                        <div class="row text-center g-2 mb-3">
                            <div class="col-4">
                                <div class="border rounded p-2 bg-light">
                                    <div class="fw-bold text-primary small">@item.Quantity</div>
                                    <div class="text-muted small">In Stock</div>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="border rounded p-2 bg-light">
                                    <div class="fw-bold text-success small">@item.Price.ToString("0.00")</div>
                                    <div class="text-muted small">Price</div>
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="border rounded p-2 bg-light">
                                    <div class="fw-bold text-info small">@item.MinStockLevel</div>
                                    <div class="text-muted small">Min Stock</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">SKU: @item.SKU</small>
                            @if (item.Quantity <= item.MinStockLevel)
                            {
                                <span class="badge bg-warning rounded-pill small">Low Stock</span>
                            }
                            else if (item.Quantity == 0)
                            {
                                <span class="badge bg-danger rounded-pill small">Out of Stock</span>
                            }
                            else
                            {
                                <span class="badge bg-success rounded-pill small">In Stock</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="text-center py-5">
                <i class="bi bi-box-seam display-4 text-muted mb-3"></i>
                <h5 class="text-muted">No inventory items found</h5>
                <p class="text-muted small">Start by adding your first inventory item or import from Excel.</p>
                <div class="mt-3">
                    <a asp-action="Create" class="btn btn-primary btn-sm me-2">
                        <i class="bi bi-plus-circle me-1"></i>Add First Item
                    </a>
                    <button type="button" class="btn btn-outline-info btn-sm" onclick="openUploadModal()">
                        <i class="bi bi-upload me-1"></i>Import from Excel
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Quick Stats -->
@if (Model.Any())
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-3">
                    <div class="row g-3 text-center">
                        <div class="col-md-3">
                            <div class="border rounded p-3 bg-light">
                                <div class="h4 text-primary mb-1">@Model.Count()</div>
                                <div class="small text-muted">Total Items</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="border rounded p-3 bg-light">
                                <div class="h4 text-success mb-1">@Model.Sum(i => i.Quantity)</div>
                                <div class="small text-muted">Total Stock</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="border rounded p-3 bg-light">
                                <div class="h4 text-warning mb-1">@Model.Count(i => i.Quantity <= i.MinStockLevel)</div>
                                <div class="small text-muted">Low Stock Items</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="border rounded p-3 bg-light">
                                <div class="h4 text-info mb-1">@Model.Sum(i => i.Price * i.Quantity).ToString("0.00")</div>
                                <div class="small text-muted">Total Value</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .card { transition: transform 0.2s ease-in-out; }
    .card:hover { transform: translateY(-1px); }
    .btn-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }
    .form-control-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }
    .form-select-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }
    .alert-sm { padding: 0.5rem 0.75rem; font-size: 0.875rem; }
    .modal-dialog { max-width: 500px; }
</style>

@section Scripts {
    <script>
        function downloadSampleExcel() {
            // Create sample Excel data
            const sampleData = [
                ['Name', 'SKU', 'Description', 'Category', 'Price', 'Quantity', 'MinimumStock'],
                ['Premium Tool Set', 'TOOL001', 'High-quality tool set for professional use', 'Tools', '150.00', '25', '5'],
                ['Circuit Board', 'PART001', 'Electronic circuit board component', 'Parts', '45.00', '50', '10'],
                ['Safety Gloves', 'SUPP001', 'Protective work gloves', 'Supplies', '12.50', '100', '20'],
                ['LED Light Bulb', 'ACC001', 'Energy-efficient LED light bulb', 'Accessories', '8.75', '75', '15'],
                ['Motor Oil', 'LUB001', 'High-performance motor oil', 'Lubricants', '25.00', '30', '8']
            ];

            // Convert to CSV format
            const csvContent = sampleData.map(row => row.join(',')).join('\n');
            
            // Create and download file
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'inventory_sample.csv';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showAlert('Sample file downloaded successfully!', 'success');
        }

        function openUploadModal() {
            const modal = new bootstrap.Modal(document.getElementById('uploadModal'));
            modal.show();
        }

        function uploadExcel() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            
            if (!file) {
                showAlert('Please select a file to upload.', 'warning');
                return;
            }

            // Check file size (5MB limit)
            if (file.size > 5 * 1024 * 1024) {
                showAlert('File size must be less than 5MB.', 'danger');
                return;
            }

            // Check file type
            const fileName = file.name.toLowerCase();
            const allowedExtensions = ['.xlsx', '.xls', '.csv'];
            const hasValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));
            
            if (!hasValidExtension) {
                showAlert('Please select a valid Excel (.xlsx, .xls) or CSV (.csv) file.', 'danger');
                return;
            }

            const formData = new FormData();
            formData.append('excelFile', file);

            // Show loading state
            const uploadBtn = event.target;
            const originalText = uploadBtn.innerHTML;
            uploadBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Uploading...';
            uploadBtn.disabled = true;

            fetch('/Inventory/ImportExcel', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(`Successfully imported ${data.importedCount} items!`, 'success');
                    // Close modal and reload page
                    const modal = bootstrap.Modal.getInstance(document.getElementById('uploadModal'));
                    modal.hide();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert('Import failed: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                showAlert('Upload error: ' + error.message, 'danger');
            })
            .finally(() => {
                uploadBtn.innerHTML = originalText;
                uploadBtn.disabled = false;
            });
        }

        function exportInventory() {
            // Show loading state
            const exportBtn = event.target;
            const originalText = exportBtn.innerHTML;
            exportBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Exporting...';
            exportBtn.disabled = true;

            fetch('/Inventory/ExportExcel', {
                method: 'GET'
            })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'inventory_export.xlsx';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
                showAlert('Inventory exported successfully!', 'success');
            })
            .catch(error => {
                showAlert('Export error: ' + error.message, 'danger');
            })
            .finally(() => {
                exportBtn.innerHTML = originalText;
                exportBtn.disabled = false;
            });
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.insertBefore(alertDiv, document.body.firstChild);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
    </script>
} 