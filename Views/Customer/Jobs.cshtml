@model IEnumerable<Billing_Software.Models.CustomerJobList>
@{
    ViewData["Title"] = "Customer Jobs";
    var customerId = Model.FirstOrDefault()?.CustomerId ?? 0;
}

<!-- Compact Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="h4 mb-1 fw-bold text-dark">Customer Jobs</h2>
        <p class="text-muted small mb-0">Manage and track job progress</p>
    </div>
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-warning btn-sm" id="resetJobsBtn">
            <i class="bi bi-arrow-clockwise me-2"></i>Reset for New Visit
        </button>
        <a href="@Url.Action("JobHistory", "Customer", new { customerId = customerId })" class="btn btn-info btn-sm">
            <i class="bi bi-clock-history me-2"></i>Job History
        </a>
        <a href="@Url.Action("Details", "Customer", new { id = customerId })" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-arrow-left me-2"></i>Back to Customer
        </a>
    </div>
</div>

<!-- Job Management Card -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-header bg-transparent border-0 d-flex justify-content-between align-items-center">
        <h6 class="mb-0 fw-bold">
            <i class="bi bi-list-task text-primary me-2"></i>Available Jobs
        </h6>
        <button type="button" class="btn btn-primary btn-sm" id="addSelectedJobsBtn">
            <i class="bi bi-plus me-2"></i>Add Selected Jobs
        </button>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th class="border-0 small">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAllJobs">
                                <label class="form-check-label small" for="selectAllJobs">Select All</label>
                            </div>
                        </th>
                        <th class="border-0 small">Job Name</th>
                        <th class="border-0 small">Description</th>
                        <th class="border-0 small">Price</th>
                        <th class="border-0 small">Current Status</th>
                        <th class="border-0 small">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr data-job-id="@item.JobListId">
                            <td class="py-2">
                                <div class="form-check">
                                    <input class="form-check-input job-checkbox" type="checkbox" 
                                           data-job-id="@item.JobListId" 
                                           @(item.IsSelected ? "checked" : "")>
                                </div>
                            </td>
                            <td class="py-2 fw-medium">@item.JobList.JobName</td>
                            <td class="py-2 small">@item.JobList.Description</td>
                            <td class="py-2 fw-bold">$@item.JobList.Price.ToString("F2")</td>
                            <td class="py-2">
                                @if (item.IsSelected)
                                {
                                    <span class="badge bg-warning rounded-pill small">Selected</span>
                                }
                                else if (item.IsCompleted)
                                {
                                    <span class="badge bg-success rounded-pill small">Completed</span>
                                }
                                else if (item.IsInvoiced)
                                {
                                    <span class="badge bg-info rounded-pill small">Invoiced</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary rounded-pill small">Available</span>
                                }
                            </td>
                            <td class="py-2">
                                <div class="btn-group btn-group-sm" role="group">
                                    @if (!item.IsCompleted)
                                    {
                                        <button type="button" class="btn btn-success btn-sm mark-completed" 
                                                data-job-id="@item.JobListId" title="Mark as Completed">
                                            <i class="bi bi-check"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-warning btn-sm mark-incomplete" 
                                                data-job-id="@item.JobListId" title="Mark as Incomplete">
                                            <i class="bi bi-arrow-counterclockwise"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Job Summary -->
<div class="card border-0 shadow-sm">
    <div class="card-header bg-transparent border-0 pb-0">
        <h6 class="mb-0 fw-bold">
            <i class="bi bi-graph-up text-info me-2"></i>Job Summary
        </h6>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center p-3">
                        <h4 class="mb-1 fw-bold" id="totalJobs">@Model.Count()</h4>
                        <p class="small mb-0">Total Jobs</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center p-3">
                        <h4 class="mb-1 fw-bold" id="selectedJobs">@Model.Count(j => j.IsSelected)</h4>
                        <p class="small mb-0">Selected</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center p-3">
                        <h4 class="mb-1 fw-bold" id="completedJobs">@Model.Count(j => j.IsCompleted)</h4>
                        <p class="small mb-0">Completed</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center p-3">
                        <h4 class="mb-1 fw-bold" id="invoicedJobs">@Model.Count(j => j.IsInvoiced)</h4>
                        <p class="small mb-0">Invoiced</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.table th {
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.table td {
    font-size: 0.875rem;
}

.badge {
    font-size: 0.75rem;
    font-weight: 500;
}

.btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
}

.card {
    transition: transform 0.2s ease-in-out;
}

.card:hover {
    transform: translateY(-1px);
}

.form-check-input {
    cursor: pointer;
}

.form-check-label {
    cursor: pointer;
}
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Select all functionality
            $('#selectAllJobs').change(function() {
                $('.job-checkbox').prop('checked', $(this).is(':checked'));
                updateSelectedCount();
            });

            // Individual job selection
            $('.job-checkbox').change(function() {
                updateSelectedCount();
                updateSelectAllCheckbox();
            });

            // Toggle job selection
            $('.job-checkbox').change(function() {
                const jobId = $(this).data('job-id');
                const isSelected = $(this).is(':checked');
                
                $.ajax({
                    url: '@Url.Action("ToggleJobSelection", "Customer")',
                    type: 'POST',
                    data: { customerId: @customerId, jobListId: jobId },
                    success: function(response) {
                        if (response.success) {
                            updateJobStatus(jobId, isSelected ? 'Selected' : 'Available');
                        } else {
                            alert('Error updating job selection: ' + response.message);
                        }
                    },
                    error: function() {
                        alert('Error updating job selection');
                    }
                });
            });

            // Mark job as completed
            $('.mark-completed').click(function() {
                const jobId = $(this).data('job-id');
                const row = $(this).closest('tr');
                
                $.ajax({
                    url: '@Url.Action("MarkJobCompleted", "Customer")',
                    type: 'POST',
                    data: { customerId: @customerId, jobListId: jobId },
                    success: function(response) {
                        if (response.success) {
                            updateJobStatus(jobId, 'Completed');
                            updateCompletedCount();
                        } else {
                            alert('Error marking job as completed: ' + response.message);
                        }
                    },
                    error: function() {
                        alert('Error marking job as completed');
                    }
                });
            });

            // Mark job as incomplete
            $('.mark-incomplete').click(function() {
                const jobId = $(this).data('job-id');
                const row = $(this).closest('tr');
                
                $.ajax({
                    url: '@Url.Action("MarkJobIncomplete", "Customer")',
                    type: 'POST',
                    data: { customerId: @customerId, jobListId: jobId },
                    success: function(response) {
                        if (response.success) {
                            updateJobStatus(jobId, 'Available');
                            updateCompletedCount();
                        } else {
                            alert('Error marking job as incomplete: ' + response.message);
                        }
                    },
                    error: function() {
                        alert('Error marking job as incomplete');
                    }
                });
            });

            // Add selected jobs
            $('#addSelectedJobsBtn').click(function() {
                const selectedJobIds = [];
                $('.job-checkbox:checked').each(function() {
                    selectedJobIds.push($(this).data('job-id'));
                });

                if (selectedJobIds.length === 0) {
                    alert('Please select at least one job');
                    return;
                }

                const requestData = {
                    customerId: @customerId,
                    jobIds: selectedJobIds
                };

                console.log('Sending data:', requestData);

                $.ajax({
                    url: '@Url.Action("AddSelectedJobs", "Customer")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(requestData),
                    success: function(response) {
                        if (response.success) {
                            alert('Selected jobs added successfully!');
                            location.reload();
                        } else {
                            alert('Error adding selected jobs: ' + response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error:', xhr.responseText);
                        alert('Error adding selected jobs: ' + error);
                    }
                });
            });

            // Reset jobs for new visit
            $('#resetJobsBtn').click(function() {
                if (confirm('Are you sure you want to reset all jobs for a new visit? This will mark all current jobs as reset.')) {
                    $.ajax({
                        url: '@Url.Action("ResetJobsForNewVisit", "Customer")',
                        type: 'POST',
                        data: { customerId: @customerId },
                        success: function(response) {
                            if (response.success) {
                                alert('Jobs reset successfully for new visit!');
                                location.reload();
                            } else {
                                alert('Error resetting jobs: ' + response.message);
                            }
                        },
                        error: function() {
                            alert('Error resetting jobs');
                        }
                    });
                }
            });

            function updateSelectedCount() {
                const selectedCount = $('.job-checkbox:checked').length;
                $('#selectedJobs').text(selectedCount);
            }

            function updateCompletedCount() {
                const completedCount = $('.badge.bg-success').length;
                $('#completedJobs').text(completedCount);
            }

            function updateSelectAllCheckbox() {
                const totalCheckboxes = $('.job-checkbox').length;
                const checkedCheckboxes = $('.job-checkbox:checked').length;
                $('#selectAllJobs').prop('checked', totalCheckboxes === checkedCheckboxes);
            }

            function updateJobStatus(jobId, status) {
                const row = $(`tr[data-job-id="${jobId}"]`);
                const statusCell = row.find('td:nth-child(5)');
                
                let badgeClass = 'badge bg-secondary rounded-pill small';
                let badgeText = 'Available';
                
                switch(status) {
                    case 'Selected':
                        badgeClass = 'badge bg-warning rounded-pill small';
                        badgeText = 'Selected';
                        break;
                    case 'Completed':
                        badgeClass = 'badge bg-success rounded-pill small';
                        badgeText = 'Completed';
                        break;
                    case 'Invoiced':
                        badgeClass = 'badge bg-info rounded-pill small';
                        badgeText = 'Invoiced';
                        break;
                }
                
                statusCell.html(`<span class="${badgeClass}">${badgeText}</span>`);
            }

            // Initialize counts
            updateSelectedCount();
            updateCompletedCount();
        });
    </script>
} 