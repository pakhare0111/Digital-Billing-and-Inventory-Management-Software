@model IEnumerable<Billing_Software.Models.JobList>
@{
    ViewData["Title"] = "Job Lists";
}

<!-- Success/Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show alert-sm" role="alert">
        <i class="bi bi-check-circle me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show alert-sm" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Compact Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h4 class="mb-1 fw-bold">
            <i class="bi bi-clipboard-data text-info me-2"></i>Job Lists
        </h4>
        <p class="text-muted small mb-0">Manage master job list and services</p>
    </div>
    <div class="btn-group btn-group-sm">
        <a asp-action="Create" class="btn btn-primary btn-sm">
            <i class="bi bi-plus-circle me-1"></i>Add New Job
        </a>
        <a asp-action="CompletedJobs" class="btn btn-outline-success btn-sm">
            <i class="bi bi-check-circle me-1"></i>Completed
        </a>
        <a asp-action="CustomerJobs" class="btn btn-outline-info btn-sm">
            <i class="bi bi-people me-1"></i>Customer Jobs
        </a>
    </div>
</div>

<!-- Compact Search and Filter with Excel Import/Export -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-header bg-transparent border-0 pb-0">
        <h6 class="mb-0 fw-bold">
            <i class="bi bi-search text-info me-2"></i>Search Jobs
        </h6>
    </div>
    <div class="card-body">
        <form method="get" class="row g-2">
            <div class="col-md-6">
                <label for="searchTerm" class="form-label small fw-medium">Search</label>
                <input type="text" class="form-control form-control-sm" id="searchTerm" name="searchTerm" value="@ViewBag.SearchTerm" placeholder="Job name or description...">
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <div>
                    <button type="submit" class="btn btn-primary btn-sm me-1">
                        <i class="bi bi-search me-1"></i>Search
                    </button>
                    <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-x-circle me-1"></i>Clear
                    </a>
                </div>
            </div>
            <div class="col-md-4 d-flex align-items-end">
                <div class="btn-group btn-group-sm w-100">
                    <button type="button" class="btn btn-outline-success btn-sm" onclick="downloadSampleExcel()">
                        <i class="bi bi-download me-1"></i>Download Sample
                    </button>
                    <button type="button" class="btn btn-outline-info btn-sm" onclick="openUploadModal()">
                        <i class="bi bi-upload me-1"></i>Import Excel
                    </button>
                    <button type="button" class="btn btn-outline-warning btn-sm" onclick="exportJobList()">
                        <i class="bi bi-file-earmark-excel me-1"></i>Export
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Excel Upload Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">
                    <i class="bi bi-file-earmark-excel text-success me-2"></i>Import Jobs from Excel
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="excelUploadForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="excelFile" class="form-label small fw-medium">Select Excel File</label>
                        <input type="file" class="form-control form-control-sm" id="excelFile" name="excelFile" 
                               accept=".xlsx,.xls,.csv" required>
                        <div class="form-text small">
                            Supported formats: .xlsx, .xls, .csv (Max size: 5MB)
                        </div>
                    </div>
                    <div class="alert alert-info alert-sm">
                        <i class="bi bi-info-circle me-2"></i>
                        <strong>Supported Formats:</strong> Excel (.xlsx, .xls) or CSV (.csv) files. 
                        The file should have columns for JobName, Description, and Price. 
                        Download the sample file for the correct format.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Cancel
                </button>
                <button type="button" class="btn btn-success btn-sm" onclick="uploadExcel()">
                    <i class="bi bi-upload me-1"></i>Import Jobs
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Job Lists Table -->
<div class="card border-0 shadow-sm">
    <div class="card-header bg-transparent border-0 pb-0">
        <div class="d-flex justify-content-between align-items-center">
            <h6 class="mb-0 fw-bold">
                <i class="bi bi-clipboard-data text-info me-2"></i>Job Lists
            </h6>
            <span class="badge bg-info rounded-pill small">@Model.Count() total</span>
        </div>
    </div>
    <div class="card-body">
        @if (!Model.Any())
        {
            <div class="text-center py-5">
                <i class="bi bi-clipboard-data display-4 text-muted mb-3"></i>
                <h5 class="text-muted">No job lists found</h5>
                <p class="small text-muted">Create your first job list or import from Excel to get started.</p>
                <div class="mt-3">
                    <a asp-action="Create" class="btn btn-primary btn-sm me-2">
                        <i class="bi bi-plus-circle me-2"></i>Add New Job
                    </a>
                    <button type="button" class="btn btn-outline-info btn-sm" onclick="openUploadModal()">
                        <i class="bi bi-upload me-1"></i>Import from Excel
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Job Name</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Created Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var job in Model)
                        {
                            <tr>
                                <td>
                                    <div class="fw-bold">@job.JobName</div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(job.Description))
                                    {
                                        <span class="text-muted small">@job.Description</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted small">No description</span>
                                    }
                                </td>
                                <td>
                                    <span class="fw-bold text-success">@job.Price.ToString("0.00")</span>
                                </td>
                                <td>
                                    <span class="text-muted small">@job.CreatedDate.ToString("MMM dd, yyyy")</span>
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a asp-action="Details" asp-route-id="@job.Id" class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a asp-action="Edit" asp-route-id="@job.Id" class="btn btn-outline-warning btn-sm">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a asp-action="Delete" asp-route-id="@job.Id" class="btn btn-outline-danger btn-sm">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<!-- Quick Stats -->
@if (Model.Any())
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-3">
                    <div class="row g-3 text-center">
                        <div class="col-md-4">
                            <div class="border rounded p-3 bg-light">
                                <div class="h4 text-primary mb-1">@Model.Count()</div>
                                <div class="small text-muted">Total Jobs</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border rounded p-3 bg-light">
                                <div class="h4 text-success mb-1">@Model.Sum(j => j.Price).ToString("0.00")</div>
                                <div class="small text-muted">Total Value</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="border rounded p-3 bg-light">
                                <div class="h4 text-info mb-1">@Model.Average(j => j.Price).ToString("0.00")</div>
                                <div class="small text-muted">Avg. Price</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .card { transition: transform 0.2s ease-in-out; }
    .card:hover { transform: translateY(-1px); }
    .btn-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }
    .form-control-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }
    .form-select-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }
    .alert-sm { padding: 0.5rem 0.75rem; font-size: 0.875rem; }
    .modal-dialog { max-width: 500px; }
</style>

@section Scripts {
    <script>
        function downloadSampleExcel() {
            // Create sample Excel data
            const sampleData = [
                ['JobName', 'Description', 'Price'],
                ['Oil Change', 'Complete oil change service with filter replacement', '45.00'],
                ['Brake Service', 'Front and rear brake pad replacement', '120.00'],
                ['Tire Rotation', 'Tire rotation and balance service', '35.00'],
                ['Air Filter Replacement', 'Engine air filter replacement', '25.00'],
                ['Battery Replacement', 'Car battery replacement and testing', '85.00'],
                ['Wheel Alignment', 'Four-wheel alignment service', '65.00'],
                ['Transmission Service', 'Transmission fluid change and inspection', '95.00'],
                ['Coolant Flush', 'Coolant system flush and refill', '75.00']
            ];

            // Convert to CSV format
            const csvContent = sampleData.map(row => row.join(',')).join('\n');
            
            // Create and download file
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'joblist_sample.csv';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showAlert('Sample file downloaded successfully!', 'success');
        }

        function openUploadModal() {
            const modal = new bootstrap.Modal(document.getElementById('uploadModal'));
            modal.show();
        }

        function uploadExcel() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            
            if (!file) {
                showAlert('Please select a file to upload.', 'warning');
                return;
            }

            // Check file size (5MB limit)
            if (file.size > 5 * 1024 * 1024) {
                showAlert('File size must be less than 5MB.', 'danger');
                return;
            }

            // Check file type
            const fileName = file.name.toLowerCase();
            const allowedExtensions = ['.xlsx', '.xls', '.csv'];
            const hasValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));
            
            if (!hasValidExtension) {
                showAlert('Please select a valid Excel (.xlsx, .xls) or CSV (.csv) file.', 'danger');
                return;
            }

            const formData = new FormData();
            formData.append('excelFile', file);

            // Show loading state
            const uploadBtn = event.target;
            const originalText = uploadBtn.innerHTML;
            uploadBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Uploading...';
            uploadBtn.disabled = true;

            fetch('/JobList/ImportExcel', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(`Successfully imported ${data.importedCount} jobs!`, 'success');
                    // Close modal and reload page
                    const modal = bootstrap.Modal.getInstance(document.getElementById('uploadModal'));
                    modal.hide();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showAlert('Import failed: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                showAlert('Upload error: ' + error.message, 'danger');
            })
            .finally(() => {
                uploadBtn.innerHTML = originalText;
                uploadBtn.disabled = false;
            });
        }

        function exportJobList() {
            // Show loading state
            const exportBtn = event.target;
            const originalText = exportBtn.innerHTML;
            exportBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Exporting...';
            exportBtn.disabled = true;

            fetch('/JobList/ExportExcel', {
                method: 'GET'
            })
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'joblist_export.xlsx';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
                showAlert('Job list exported successfully!', 'success');
            })
            .catch(error => {
                showAlert('Export error: ' + error.message, 'danger');
            })
            .finally(() => {
                exportBtn.innerHTML = originalText;
                exportBtn.disabled = false;
            });
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.insertBefore(alertDiv, document.body.firstChild);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
    </script>
} 